{
"AWSTemplateFormatVersion" : "2010-09-09",

"Description" : "VPC_AutoScaling_and_ElasticLoadBalancer: Create a load balanced, Auto Scaled appache website in an existing Virtual Private Cloud (VPC).",
  
	"Parameters" : {
	   	"VpcId" : {
			"Type" : "AWS::EC2::VPC::Id",
			"Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
			"ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
		},

		"Subnets" : {
			"Type" : "List<AWS::EC2::Subnet::Id>",
			"Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
			"ConstraintDescription" : "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
		},
		"OperatorEMail"	: {
			"Description": "EMail address to notify if there are any scaling operations",
			"Type": "String",
			"Default" : "Praveen@gmail.com"
		},

		"ARNRole" :{
			"Type" : "String",
			"Description": "Role to put life cycle hooks",
			"Default" : "arn:aws:iam::345171226748:role/Autoscaling"
		},
		
		"KeyName" : {
			"Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
			"Type" : "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
		},

		"SSHLocation" : {
			"Description" : "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
			"Type" : "String",
			"MinLength": "7",
			"MaxLength": "15",
			"Default" : "0.0.0.0/0",
			"AllowedPattern" : "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(\\d|[1-2]\\d|3[0-2]))?$",
			"ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
		},
		
		"InstanceType": {
			"Description": "Amazon EC2 instance type for the NAT instance. This instance will be put on public subnet 1.",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": [
			"t2.micro", "t2.small", "t2.medium", "t2.large",
			"m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge",
			"m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge"
			]
		},
		"InstanceCount" : {
			"Description" : "Number of EC2 instances to launch",
			"Type" : "Number",
			"Default" : "1"
			}
		},
		
	"Mappings" : {
		"Region2Examples" : {
			"us-east-1"      : { "Examples" : "https://s3.amazonaws.com/cloudformation-examples-us-east-1" }
			},
		"AWSInstanceType2Arch" : {
			"t2.nano"     : { "Arch" : "HVM64"  },
			"t2.micro"    : { "Arch" : "HVM64"  },
			"t2.small"    : { "Arch" : "HVM64"  },
			"t2.medium"   : { "Arch" : "HVM64"  },
			"t2.large"    : { "Arch" : "HVM64"  }
			},
		"AWSInstanceType2NATArch" : {
			"t2.nano"     : { "Arch" : "NATHVM64"  },
			"t2.micro"    : { "Arch" : "NATHVM64"  },
			"t2.small"    : { "Arch" : "NATHVM64"  },
			"t2.medium"   : { "Arch" : "NATHVM64"  },
			"t2.large"    : { "Arch" : "NATHVM64"  }
			},
	
		"AWSRegionArch2AMI" : {
			"us-east-1"        : {"PV64" : "ami-2a69aa47", "HVM64" : "ami-6869aa05", "HVMG2" : "ami-1f12e965"}
			}
		},
	"Resources" : {
		
		"NotificationTopic": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
			"Subscription": [ { "Endpoint": { "Ref": "OperatorEMail" }, "Protocol": "email" } ]
			}
		},

		"WebServerGroup" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Properties" : {
			"VPCZoneIdentifier" : { "Ref" : "Subnets" },
			"LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
			"MinSize" : "1",
			"MaxSize" : "10",
			"DesiredCapacity" : { "Ref" : "InstanceCount" },
			"TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ]
		},
		"CreationPolicy" : {
			"ResourceSignal" : {
			"Timeout" : "PT15M"
			}
		},
		"UpdatePolicy": {
			"AutoScalingRollingUpdate": {
			"MinInstancesInService": "1",
			"MaxBatchSize": "1",
			"PauseTime" : "PT15M",
			"WaitOnResourceSignals": "true"
				}
			}
		},
		"myLifecycleHook": {
			"Type": "AWS::AutoScaling::LifecycleHook",
			"Properties": {
			"AutoScalingGroupName": { "Ref": "WebServerGroup" },
			"LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
			"NotificationTargetARN": { "Ref": "NotificationTopic" },
			"HeartbeatTimeout" : "300",
			"RoleARN": { "Ref" : "ARNRole" }
			}
		},
		"LaunchConfig" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Metadata" : {
			"Comment" : "Install a simple application",
			"AWS::CloudFormation::Init" : {
			"config" : {
            "packages" : {
              "yum" : {
                "httpd"             : []
              }
            },
        "files" : {
              "/var/www/html/index.html" : {
                "content" : { "Fn::Join" : ["\n", [
                  "<img src=\"", {"Fn::FindInMap" : ["Region2Examples", {"Ref" : "AWS::Region"}, "Examples"]}, "/cloudformation_graphic.png\" alt=\"AWS CloudFormation Logo\"/>",
                  "<h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>"
                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource LaunchConfig ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              }
            },
			

            "services" : {
				"sysvinit" : {
                "httpd"    : { "enabled" : "true", "ensureRunning" : "true" },
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
						}
					}
				}
			}
		},
		"Properties" : {
			"AssociatePublicIpAddress" : "true",
			"ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                         { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
			"SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
			"KeyName"        : { "Ref" : "KeyName" },
			"InstanceType" : { "Ref" : "InstanceType" },
			"UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update -y aws-cfn-bootstrap\n",
             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource LaunchConfig ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource WebServerGroup ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",
			 "MESSAGE=$(echo 'hookname:' ${myLifecycleHook})",
			 "aws sns publish --subject '[INFO]: AutoScaling' --message \"$MESSAGE\"  --target-arn ${ARNRole} --region ${AWS::Region}",
			 "aws autoscaling complete-lifecycle-action --lifecycle-action-result CONTINUE --instance-id ${ImageId} --lifecycle-hook-name ${myLifecycleHook} --auto-scaling-group-name ${WebServerGroup}"
							]
						]
					}
			
				}
			}
		},

		"ApplicationLoadBalancer" : {
			"Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties" : {
			"Subnets" : { "Ref" : "Subnets"},
			"SecurityGroups" : [ { "Ref" : "LoadBalancerSecurityGroup" } ]
			}
		},
		"ALBListener" : {
			"Type" : "AWS::ElasticLoadBalancingV2::Listener",
			"Properties" : {
			"DefaultActions" : [{
			"Type" : "forward",
			"TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
			}],
			"LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
			"Port" : "80",
			"Protocol" : "HTTP"
			}
		},

		"ALBTargetGroup" : {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
			"HealthCheckIntervalSeconds" : 30,
			"HealthCheckTimeoutSeconds" : 25,
			"HealthyThresholdCount" : 3,
			"Port" : 80,
			"Protocol" : "HTTP",
			"UnhealthyThresholdCount" : 5,
			"VpcId" : {"Ref" : "VpcId"}
			}
		},

		"LoadBalancerSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
			"GroupDescription" : "Enable HTTP access on port 80",
			"VpcId" : { "Ref" : "VpcId" },
			"SecurityGroupIngress" : [ {
			"IpProtocol" : "tcp",
			"FromPort" : "80",
			"ToPort" : "80",
			"CidrIp" : "0.0.0.0/0"
			} ],
        "SecurityGroupEgress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
				} ]
			}
		},
		"InstanceSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
			"GroupDescription" : "Enable HTTP access and SSH access",
			"VpcId" : { "Ref" : "VpcId" },
			"SecurityGroupIngress" : [
				{ "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "LoadBalancerSecurityGroup" } },
				{ "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation" } }
					]
				}
			}
		}
	}
	